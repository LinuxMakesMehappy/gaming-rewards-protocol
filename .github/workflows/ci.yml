name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  SOLANA_VERSION: '1.17.0'

jobs:
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd bots && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd bots && npm audit --audit-level=moderate

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          args: --only-verified --fail

      - name: Check for .env files
        run: |
          if find . -name ".env" -type f | grep -q .; then
            echo "❌ .env files found! These should not be committed."
            find . -name ".env" -type f
            exit 1
          else
            echo "✅ No .env files found"
          fi

      - name: Check for private keys
        run: |
          if grep -r "private.*key\|secret.*key" . --exclude-dir=node_modules --exclude-dir=.git --exclude=*.md | grep -v "your_private_key_here\|test_key_here"; then
            echo "❌ Potential private keys found in code!"
            exit 1
          else
            echo "✅ No private keys found in code"
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd bots && npm ci

      - name: Create test environment
        run: |
          cp env.example .env
          # Set test values
          sed -i 's/your_bot_private_key_here/test_bot_key/g' .env
          sed -i 's/your_oracle_private_key_here/test_oracle_key/g' .env
          sed -i 's/your_steam_api_key_here/test_steam_key/g' .env
          sed -i 's/your_treasury_public_key_here/test_treasury_key/g' .env
          sed -i 's/your_sentry_dsn_here//g' .env
          sed -i 's/NODE_ENV=development/NODE_ENV=test/g' .env
          sed -i 's/TEST_MODE=false/TEST_MODE=true/g' .env

      - name: Build project
        run: |
          cd bots && npm run build

      - name: Run tests
        run: |
          cd bots && npm test

      - name: Run tests with coverage
        run: |
          cd bots && npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./bots/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd bots && npm ci

      - name: Run ESLint
        run: |
          cd bots && npm run lint

      - name: Check code formatting
        run: |
          cd bots && npm run format:check

      - name: Type check
        run: |
          cd bots && npm run build

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [security, test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd bots && npm ci

      - name: Build project
        run: |
          cd bots && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: bots/dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [security, test, lint, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t gaming-rewards-bot:latest .
          docker build -t gaming-rewards-bot:${{ github.sha }} .

      - name: Run Docker security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v /tmp/.cache/trivy:/root/.cache/trivy \
            aquasec/trivy image gaming-rewards-bot:latest

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [security, test, lint, build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Add your deployment steps here
          # Example: kubectl apply, docker push, etc.

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, test, lint, build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your deployment steps here
          # Example: kubectl apply, docker push, etc.

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ All checks passed successfully!"
          # Add notification logic here (Slack, Discord, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Some checks failed!"
          # Add notification logic here (Slack, Discord, etc.)
