use thiserror::Error;

#[derive(Error, Debug)]
pub enum LiquidityError {
    #[error("API request failed: {0}")]
    ApiError(#[from] reqwest::Error),
    
    #[error("Solana client error: {0}")]
    SolanaError(#[from] solana_client::client_error::ClientError),
    
    #[error("Serialization error: {0}")]
    SerializationError(#[from] serde_json::Error),
    
    #[error("No route found for {input_token} -> {output_token}")]
    NoRouteFound {
        input_token: String,
        output_token: String,
    },
    
    #[error("Insufficient liquidity for swap")]
    InsufficientLiquidity,
    
    #[error("Slippage tolerance exceeded: {actual}% > {tolerance}%")]
    SlippageExceeded {
        actual: f64,
        tolerance: f64,
    },
    
    #[error("Security check failed: {reason}")]
    SecurityError { reason: String },
    
    #[error("Rate limit exceeded")]
    RateLimitExceeded,
    
    #[error("Invalid token address: {address}")]
    InvalidTokenAddress { address: String },
    
    #[error("Transaction failed: {reason}")]
    TransactionFailed { reason: String },
    
    #[error("Pool not found: {address}")]
    PoolNotFound { address: String },
    
    #[error("Invalid amount: {amount}")]
    InvalidAmount { amount: u64 },
    
    #[error("Configuration error: {message}")]
    ConfigurationError { message: String },
}

pub type Result<T> = std::result::Result<T, LiquidityError>;
